service: sls-demo-function

frameworkVersion: ">=1.8.0 <2.0.0"

plugins:
  - serverless-iam-roles-per-function
  - serverless-pseudo-parameters
  
provider:
  name: aws
  region: ${opt:region, 'ap-southeast-1'}
  stage: ${opt:stage, 'dev'}
  stackName: function-stack-${self:provider.stage}
  environment:
    Bucket_Name: gamer-avatar-${self:provider.stage}
    Gamer_Table: gamer-${self:provider.stage}
          
functions:
  addGamer:
    runtime: python3.8
    handler: python/add-gamer.handler
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource:
        - Fn::Sub: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/gamer-${self:provider.stage}"
    events:
    - http:
        path: /add-gamer
        method: post
        cors: true
  deleteGamer:
    runtime: python3.8
    handler: python/delete-gamer.handler
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
        Resource:
        - Fn::Sub: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/gamer-${self:provider.stage}"
    events:
    - http:
        path: /delete-gamer
        method: post
        cors: true
  searchGamer:
    runtime: python3.8
    handler: python/search-gamer.handler
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource:
        - Fn::Sub: "arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/gamer-${self:provider.stage}"
    events:
    - http:
        path: /search-gamer
        method: get
        cors: true
  putAvatarToS3:
    runtime: nodejs12.x
    handler: node/put-avatar-to-s3.handler
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:PutObject
        Resource: "arn:aws:s3:::gamer-avatar-${self:provider.stage}/*"
    events:
    - http:
        path: /put-avatar-to-S3
        method: post
        cors: true
  getAvatarToS3:
    runtime: nodejs12.x
    handler: node/get-avatar-from-s3.handler
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:GetObject
        Resource: "arn:aws:s3:::gamer-avatar-${self:provider.stage}/*"
    events:
    - http:
        path: /get-avatar-from-S3
        method: get
        cors: true

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '501'

package:
  exclude:
  - .serverless/**
  - resources/**
  - /*.yml